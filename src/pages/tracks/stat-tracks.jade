link(rel="import", href="lefty-menu-layout.html")
link(rel="import", href="runner-backend.html")
link(rel="import", href="dep/core-field/core-field.html")
link(rel="import", href="dep/chart-elements/chart-line.html")

polymer-element(name="stat-tracks")
  template
    runner-backend(id="backend")
    lefty-menu-layout(selected="stats", pageTitle="Stats")
      p always present text
      template(if="{{tracks.length === 0}}")
        p there is no tracks yet
      template(if="{{tracks.length > 0 }}")
        | Average track
        form
          core-field
            label Average distance: {{averageTrack.distance}}
          core-field
            label Average duration: {{averageTrack.duration}} min
          core-field
            label Average heart rate: {{averageTrack.heartRate}} bpm
        div(style="display:flex")
          div(style="display: flex, flex-direction: verical")
            center Distance evolution
            chart-line(values="{{distanceSeries}}", labels="{{seriesDate}}", colors="{{[seriesColors[0]]}}")
          div(style="display:flex, flex-direction:vertical")
            center Duration evolution
            chart-line(values="{{durationSeries}}", labels="{{seriesDate}}", colors="{{[seriesColors[1]]}}")
          div(style="display:flex, flex-direction:vertical")
            center HeartRate evolution
            chart-line(values="{{heartRateSeries}}", labels="{{seriesDate}}", colors="{{[seriesColors[2]]}}")

      template(repeat="{{track, i in tracks}}")
        | track \#{{i+1}}
        form
          core-field
            label Distance: {{track.distance}} km
          core-field
            label Duration: {{track.duration}} min
          core-field
            label Heart rate: {{track.heartRate}} bpm
          core-field
            label Feeling: {{track.feeling}}
  script.
    Polymer('stat-tracks',{
      domReady:function(){
        this.tracks = this.$.backend.getAllTracks();
        this.averageTrack = this.getAverageTrack();
        this.distanceSeries = [this.tracks.map(function(track){ return track.distance})];
        this.durationSeries = [this.tracks.map(function(track){ return track.duration})];
        this.heartRateSeries = [this.tracks.map(function(track){ return track.heartRate})];
        this.seriesColors = ['253,180,92','247,70,74','70,191,189','148,159,177','77,83,96'];
      },
      getAverageTrack: function(){
        return {
          duration: this.tracks.reduce(function(acc, track){ return acc + track.duration}, 0) / this.tracks.length,
          distance: this.tracks.reduce(function(acc, track){ return acc + track.distance},0)/ this.tracks.length,
          heartRate: this.tracks.reduce(function(acc, track){ return acc + track.heartRate}, 0)/ this.tracks.length
        }
      }
    })
