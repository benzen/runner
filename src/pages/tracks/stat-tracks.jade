link(rel="import", href="lefty-menu-layout.html")
link(rel="import", href="runner-backend.html")
link(rel="import", href="dep/core-field/core-field.html")
link(rel="import", href="dep/chart-elements/chart-line.html")
link(rel="import", href="dep/paper-button/paper-button.html")

polymer-element(name="stat-tracks")
  template
    runner-backend(id="backend", tracks="{{tracks}}")
    lefty-menu-layout(selected="stats", pageTitle="Stats")
      p always present text
      template(if="{{tracks.length === 0}}")
        p there is no tracks yet
      template(if="{{tracks.length > 1 }}")
        | Average track
        form
          core-field
            label Average distance: {{averageDistance(tracks)}}
          core-field
            label Average duration: {{averageDuration(tracks)}} min
          core-field
            label Average heart rate: {{averageHeartRate(tracks)}} bpm
        div( layout horizontal)
          div(vertical flex)
            center Distance evolution
            chart-line(values="{{distanceSeries(tracks)}}", labels="{{seriesDate(tracks)}}", colors="{{colorsSeries(0)}}")
          div(flex veritcal)
            center Duration evolution
            chart-line(values="{{durationSeries(tracks)}}", labels="{{seriesDate(tracks)}}", colors="{{colorsSeries(1)}}")
          div(flex vertical)
            center HeartRate evolution
            chart-line(values="{{heartRateSeries(tracks)}}", labels="{{seriesDate(tracks)}}", colors="{{colorsSeries(2)}}")

      template(repeat="{{track, trackIndex in tracks}}")
        | track \#{{trackIndex+1}}
        paper-button(on-click="{{deleteTrack}}", label="Delete", icon="delete")
        form
          core-field
            label Distance: {{track.distance}} km
          core-field
            label Duration: {{track.duration}} min
          core-field
            label Heart rate: {{track.heartRate}} bpm
          core-field
            label Feeling: {{track.feeling}}
  script.
    Polymer('stat-tracks',{
      averageForField:function(tracks, field){
        if(!tracks) return 0;
        var numbers = tracks.map(function(track){ return track[field]});
        var sum = numbers.reduce(function(acc,n){ return acc+n});
        return this.round(sum / tracks.length, 2)
      },
      round:function(n, nbDecimal){
          var mul = Math.pow(10, nbDecimal);
          var nMul = n*mul;
          var roundedNMul = Math.round(nMul);
          var roundedN = roundedNMul / mul;
          return roundedN;
      },
      seriesForField:function(tracks, field, inArray){
        var series = tracks.map(function(track){ return track[field]})
        if(inArray){
          return [series];
        }else {
          return series;
        }
      },
      averageDuration:function(tracks){
        return this.averageForField(tracks, "duration");
      },
      averageDistance:function(tracks){
        return this.averageForField(tracks, "distance");
      },
      averageHeartRate:function(tracks){
        return this.averageForField(tracks, "heartRate");
      },
      deleteTrack:function(event){
        var trackIndex = event.target.templateInstance.model.trackIndex
        trackIndex = parseInt(trackIndex, 10);
        this.$.backend.trackToDelete = trackIndex;
      },
      distanceSeries:function(tracks){
        return this.seriesForField(tracks, 'distance', true);
      },
      durationSeries: function(tracks){
        return this.seriesForField(tracks, 'duration', true);
      },
      heartRateSeries: function(tracks){
        return this.seriesForField(tracks, 'heartRate', true);
      },
      seriesDate:function(tracks){
        return this.seriesForField(tracks, 'date');
      },
      colorsSeries:function(selectedColor){
        var colors =  ['253,180,92','247,70,74','70,191,189','148,159,177','77,83,96'];
        return [colors[selectedColor]];
      }
    })
